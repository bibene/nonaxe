;Disclaimer and notes:
;
;	* Emulator is for educational purposes only
;		Make sure you don't violate local laws or your service contract. 
;		I take no responsibility for anything resulting	from the use of this source code.
;	* Emulator does not support pairing
;		Implementing TypeA pairing should be possible at least but I'm not going to do it.
;		TypeB pairing on the other hand has never been reverse engineered
;	* Emulator is released under the GPLv3 license
;		Feel free to modify but make sure you share.
;		http://www.gnu.org/licenses/gpl-3.0.html
;	* Emulator is unsupported
;		I've only tested it on linux using the gpio reset watcher on an embedded system.
;		Any deviation from my test setup and you can run into bugs that you'll need to fix.
;		Good luck!
;	* Timings are evil (sometimes)
;		CAS7 cards take their time processing ECMs (probably a deliberate delay)
;		When two clients are watching different channels and the ecm timing of those drift
;		and converge then one of those ECMs can take average response time * 2 to process.
;		You don't have very long to respond to an ECM command. Around 1 second is it.
;		If your card processes a request in 500ms+ then it's obvious that one of your clients 
;		will be over limit and skip and that's with only 2 clients.
;		This is probably provider and technology (DVB-S/T/C) dependent but keep it in mind.
;	* Fine tune OSCAM for best results
;		When AU is enabled, the first ECM request gets discarded as OSCAM sends two 
;		EMM_REQUESTs to the new AU-enabled client connection before processing ECMs.
;		This can lead to the first channel open after power-on taking 30+ seconds.
;			Solution: Set the AU user account's session timeout to a large number.
;		EMMs take longer to process than ECMs, hogging precious card time.
;			Solution: Enable EMM caching with a low rewrite count.
;		Etc..
;			Experiment!		
;		
;Requirements:
;
;	* Access to an OSCAM or other card server instance that supports the camd35 UDP protocol
;	* Some type of Season interface connected to something you want to run the emu on
;	* _UNPAIRED_ target device (CAM or Set-top-box)
;
;To use:
;
;	0. Compile the emu
;	1. Fill in your card info (ATR, IDs, serials) below
;		Hint: OSCAM can show you most of them, STB info menus may show you the rest.
;		Don't change the length of IDs and serials in the example config. 
;		Prepend with 00s instead if shorter
;		ATR length is arbitrary
;	2. Configure the reset according to your interface
;	3. Configure the port and speed (note that unstandard bauds are not handled. 
;	   if you need them buy a CP2102 based interface and use the manufacturer tool to 
;	   modify the baud rate table, it works great, no headaches. 
;	   ... or implement the functionality in the serial classes yourself.)
;	4. Fill in your card server access details (emu has been tested with OSCAM only)
;	5. Rename this file to nonaxe.ini 
;		You may remove this large readme section if you wish
;	6. Deploy and run
;
;Boolean fields are 0= false, 1= true
;
;Configuration options that aren't obvious:
;
;noAccessMode  
;		valid options: error, nullcw
;		
;		Defines what the emu should do when the control word for an ECM couldn't be resolved (in time)
;		Sometimes sending the no access error has usability or stability implications because
;		of bugs and peculiarities in various device firmwares. One example would be:
;		Samsung TVs popping up an annoying modal dialog that has to be dismissed manually.
;		In those cases sending a null control word instead might be desirable.
;
;acceptIdentify
;		valid options: 0, 1
;		
;		Defines whether the identification handshake for receiving and processing EMMs is handled.
;		If 0 the handshake process will be ACK-ed without a proper response. 
;		This should stop the CAM/STB from sending EMMs to the emu.
;		! Not guaranteed to be compatible with your device !
;
;[reset] type
;		valid options: gpio(linux only!), flowcontrol
;
;		Defines the module to use for the reset source.
;		gpio uses /dev/gpio, flowcontrol uses cts,dtr,ri on the serial port.
;		

[emulator]
debug=0
debugReset=0
debugTrace=0
debugCommandDump=0
debugEcmDump=0
debugEcmTiming=0
debugEmmDump=0
noAccessMode=nullcw
acceptIdentify=0

[reset]
type=gpio

[gpioReset]
device=/dev/gpio
pin=3

[flowControlReset]
pin=cts
inverted=0

[transport]
debug=0
port=/dev/ttyS0
baud=9600

[card]
atr=11223344556677889900
cardSerial=11223344
groupSerial=11223344
languageId=0011
systemId=0B22
interfaceVersion=$40
restrictionLevel=8
sessions=5
cardPin=1234

[camd35]
debug=1
host=127.0.0.1
port=30000
user=user
password=password
prid=00000000
srvid=0001
caid=0B22
sendemm=0
ecmTimeout=950